<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['E_Errtype'] = array(
  'TICKET_CREATE_FAILD' => 90001,
  'TICKET_EXPLAIN_FAILD' => 90002,
  'REQUEST_TOO_FASTER' => 90003,
  'SYSTEM_WRONG' => 90004,
  'USER_NO_FIND' => 10020,
  'USER_NOT_VALIDATE' => 10015,
  'USER_IS_EXIST' => 10032,
  'PASSWORD_WRONG' => 10021,
  'DEVICE_ID_NOT_BIND' => 10031,
  'DEVICE_ID_IS_EXIST' => 10033,
  'PARAM_NOT_ALLOW_EMPTY' => 20001,
  'PNUM_FORMATE_WRONG' => 20101,
  'UID_FORMATE_WRONG' => 20102,
  'OS_FORMATE_WRONG' => 20103,
  'APP_ID_FORMATE_WRONG' => 20104,
  'DEVICE_ID_FORMATE_WRONG' => 20105,
);

final class Errtype {
  const TICKET_CREATE_FAILD = 90001;
  const TICKET_EXPLAIN_FAILD = 90002;
  const REQUEST_TOO_FASTER = 90003;
  const SYSTEM_WRONG = 90004;
  const USER_NO_FIND = 10020;
  const USER_NOT_VALIDATE = 10015;
  const USER_IS_EXIST = 10032;
  const PASSWORD_WRONG = 10021;
  const DEVICE_ID_NOT_BIND = 10031;
  const DEVICE_ID_IS_EXIST = 10033;
  const PARAM_NOT_ALLOW_EMPTY = 20001;
  const PNUM_FORMATE_WRONG = 20101;
  const UID_FORMATE_WRONG = 20102;
  const OS_FORMATE_WRONG = 20103;
  const APP_ID_FORMATE_WRONG = 20104;
  const DEVICE_ID_FORMATE_WRONG = 20105;
  static public $__names = array(
    90001 => 'TICKET_CREATE_FAILD',
    90002 => 'TICKET_EXPLAIN_FAILD',
    90003 => 'REQUEST_TOO_FASTER',
    90004 => 'SYSTEM_WRONG',
    10020 => 'USER_NO_FIND',
    10015 => 'USER_NOT_VALIDATE',
    10032 => 'USER_IS_EXIST',
    10021 => 'PASSWORD_WRONG',
    10031 => 'DEVICE_ID_NOT_BIND',
    10033 => 'DEVICE_ID_IS_EXIST',
    20001 => 'PARAM_NOT_ALLOW_EMPTY',
    20101 => 'PNUM_FORMATE_WRONG',
    20102 => 'UID_FORMATE_WRONG',
    20103 => 'OS_FORMATE_WRONG',
    20104 => 'APP_ID_FORMATE_WRONG',
    20105 => 'DEVICE_ID_FORMATE_WRONG',
  );
}

$GLOBALS['E_Scoretype'] = array(
  '_ACTION_TYPE_AD' => 0,
  '_ACTION_TYPE_RIGHT_CATCH' => 1,
  '_ACTION_TYPE_REGISTER' => 2,
  '_ACTION_TYPE_OTHER' => 3,
  '_ACTION_TYPE_TASK' => 4,
  '_ACTION_TYPE_ACTIVE' => 5,
  '_ACTION_TYPE_SCORE_REDUCE' => 6,
  '_ACTION_TYPE_SCORE_REFUND' => 7,
  '_ACTION_TYPE_WIFI_SHARED' => 8,
);

final class Scoretype {
  const _ACTION_TYPE_AD = 0;
  const _ACTION_TYPE_RIGHT_CATCH = 1;
  const _ACTION_TYPE_REGISTER = 2;
  const _ACTION_TYPE_OTHER = 3;
  const _ACTION_TYPE_TASK = 4;
  const _ACTION_TYPE_ACTIVE = 5;
  const _ACTION_TYPE_SCORE_REDUCE = 6;
  const _ACTION_TYPE_SCORE_REFUND = 7;
  const _ACTION_TYPE_WIFI_SHARED = 8;
  static public $__names = array(
    0 => '_ACTION_TYPE_AD',
    1 => '_ACTION_TYPE_RIGHT_CATCH',
    2 => '_ACTION_TYPE_REGISTER',
    3 => '_ACTION_TYPE_OTHER',
    4 => '_ACTION_TYPE_TASK',
    5 => '_ACTION_TYPE_ACTIVE',
    6 => '_ACTION_TYPE_SCORE_REDUCE',
    7 => '_ACTION_TYPE_SCORE_REFUND',
    8 => '_ACTION_TYPE_WIFI_SHARED',
  );
}

$GLOBALS['E_Apptype'] = array(
  '_APP_ZHUAN' => 0,
  '_APP_WIFI' => 1,
  '_APP_GAME' => 2,
);

final class Apptype {
  const _APP_ZHUAN = 0;
  const _APP_WIFI = 1;
  const _APP_GAME = 2;
  static public $__names = array(
    0 => '_APP_ZHUAN',
    1 => '_APP_WIFI',
    2 => '_APP_GAME',
  );
}

class InvalidOperation extends TException {
  static $_TSPEC;

  public $what = null;
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'what',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['what'])) {
        $this->what = $vals['what'];
      }
      if (isset($vals['why'])) {
        $this->why = $vals['why'];
      }
    }
  }

  public function getName() {
    return 'InvalidOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->what);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->why);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidOperation');
    if ($this->what !== null) {
      $xfer += $output->writeFieldBegin('what', TType::I32, 1);
      $xfer += $output->writeI32($this->what);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->why !== null) {
      $xfer += $output->writeFieldBegin('why', TType::STRING, 2);
      $xfer += $output->writeString($this->why);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserAddObj {
  static $_TSPEC;

  public $pnum = null;
  public $pw = null;
  public $device_id = null;
  public $imsi = null;
  public $ic = null;
  public $os_type = null;
  public $channel = null;
  public $client_ip = null;
  public $app_id = null;
  public $app_version = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pnum',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'pw',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'imsi',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ic',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'os_type',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'client_ip',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'app_id',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'app_version',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pnum'])) {
        $this->pnum = $vals['pnum'];
      }
      if (isset($vals['pw'])) {
        $this->pw = $vals['pw'];
      }
      if (isset($vals['device_id'])) {
        $this->device_id = $vals['device_id'];
      }
      if (isset($vals['imsi'])) {
        $this->imsi = $vals['imsi'];
      }
      if (isset($vals['ic'])) {
        $this->ic = $vals['ic'];
      }
      if (isset($vals['os_type'])) {
        $this->os_type = $vals['os_type'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['client_ip'])) {
        $this->client_ip = $vals['client_ip'];
      }
      if (isset($vals['app_id'])) {
        $this->app_id = $vals['app_id'];
      }
      if (isset($vals['app_version'])) {
        $this->app_version = $vals['app_version'];
      }
    }
  }

  public function getName() {
    return 'UserAddObj';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pnum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imsi);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->os_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->client_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->app_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserAddObj');
    if ($this->pnum !== null) {
      $xfer += $output->writeFieldBegin('pnum', TType::I64, 1);
      $xfer += $output->writeI64($this->pnum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pw !== null) {
      $xfer += $output->writeFieldBegin('pw', TType::STRING, 2);
      $xfer += $output->writeString($this->pw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_id !== null) {
      $xfer += $output->writeFieldBegin('device_id', TType::STRING, 3);
      $xfer += $output->writeString($this->device_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imsi !== null) {
      $xfer += $output->writeFieldBegin('imsi', TType::STRING, 4);
      $xfer += $output->writeString($this->imsi);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ic !== null) {
      $xfer += $output->writeFieldBegin('ic', TType::STRING, 5);
      $xfer += $output->writeString($this->ic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_type !== null) {
      $xfer += $output->writeFieldBegin('os_type', TType::STRING, 6);
      $xfer += $output->writeString($this->os_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::STRING, 7);
      $xfer += $output->writeString($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_ip !== null) {
      $xfer += $output->writeFieldBegin('client_ip', TType::STRING, 8);
      $xfer += $output->writeString($this->client_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_id !== null) {
      $xfer += $output->writeFieldBegin('app_id', TType::I32, 9);
      $xfer += $output->writeI32($this->app_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_version !== null) {
      $xfer += $output->writeFieldBegin('app_version', TType::STRING, 10);
      $xfer += $output->writeString($this->app_version);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ScoreAddObj {
  static $_TSPEC;

  public $uid = null;
  public $device_id = null;
  public $action_type = null;
  public $currency = null;
  public $pack_name = null;
  public $trade_type = null;
  public $ad_name = null;
  public $order_id = null;
  public $time_stamp = null;
  public $client_ip = null;
  public $app_id = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'action_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'currency',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'pack_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'trade_type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'ad_name',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'order_id',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'time_stamp',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'client_ip',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'app_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['device_id'])) {
        $this->device_id = $vals['device_id'];
      }
      if (isset($vals['action_type'])) {
        $this->action_type = $vals['action_type'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['pack_name'])) {
        $this->pack_name = $vals['pack_name'];
      }
      if (isset($vals['trade_type'])) {
        $this->trade_type = $vals['trade_type'];
      }
      if (isset($vals['ad_name'])) {
        $this->ad_name = $vals['ad_name'];
      }
      if (isset($vals['order_id'])) {
        $this->order_id = $vals['order_id'];
      }
      if (isset($vals['time_stamp'])) {
        $this->time_stamp = $vals['time_stamp'];
      }
      if (isset($vals['client_ip'])) {
        $this->client_ip = $vals['client_ip'];
      }
      if (isset($vals['app_id'])) {
        $this->app_id = $vals['app_id'];
      }
    }
  }

  public function getName() {
    return 'ScoreAddObj';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pack_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->trade_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ad_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time_stamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->client_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->app_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScoreAddObj');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_id !== null) {
      $xfer += $output->writeFieldBegin('device_id', TType::STRING, 2);
      $xfer += $output->writeString($this->device_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_type !== null) {
      $xfer += $output->writeFieldBegin('action_type', TType::I32, 3);
      $xfer += $output->writeI32($this->action_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::I32, 4);
      $xfer += $output->writeI32($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pack_name !== null) {
      $xfer += $output->writeFieldBegin('pack_name', TType::STRING, 5);
      $xfer += $output->writeString($this->pack_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trade_type !== null) {
      $xfer += $output->writeFieldBegin('trade_type', TType::I32, 6);
      $xfer += $output->writeI32($this->trade_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_name !== null) {
      $xfer += $output->writeFieldBegin('ad_name', TType::STRING, 7);
      $xfer += $output->writeString($this->ad_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_id !== null) {
      $xfer += $output->writeFieldBegin('order_id', TType::STRING, 8);
      $xfer += $output->writeString($this->order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time_stamp !== null) {
      $xfer += $output->writeFieldBegin('time_stamp', TType::I32, 9);
      $xfer += $output->writeI32($this->time_stamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_ip !== null) {
      $xfer += $output->writeFieldBegin('client_ip', TType::STRING, 10);
      $xfer += $output->writeString($this->client_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_id !== null) {
      $xfer += $output->writeFieldBegin('app_id', TType::I32, 11);
      $xfer += $output->writeI32($this->app_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserTicket {
  static $_TSPEC;

  public $islogin = null;
  public $ticket = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'islogin',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'ticket',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['islogin'])) {
        $this->islogin = $vals['islogin'];
      }
      if (isset($vals['ticket'])) {
        $this->ticket = $vals['ticket'];
      }
    }
  }

  public function getName() {
    return 'UserTicket';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->islogin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ticket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserTicket');
    if ($this->islogin !== null) {
      $xfer += $output->writeFieldBegin('islogin', TType::BOOL, 1);
      $xfer += $output->writeBool($this->islogin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticket !== null) {
      $xfer += $output->writeFieldBegin('ticket', TType::STRING, 2);
      $xfer += $output->writeString($this->ticket);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserInfo {
  static $_TSPEC;

  public $uid = null;
  public $mobile = null;
  public $pword = null;
  public $device_id = null;
  public $from_app = null;
  public $channel = null;
  public $ulevel = null;
  public $total_score = 0;
  public $ctime = null;
  public $caution = null;
  public $today_score = 0;
  public $ic = null;
  public $ic_content = null;
  public $ic_url = null;
  public $time_stamp = null;
  public $os_type = null;
  public $imsi = null;
  public $status = null;
  public $register_ip = null;
  public $score = 0;
  public $invite_code = 0;
  public $point = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'pword',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'from_app',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ulevel',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'total_score',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'ctime',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'caution',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'today_score',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'ic',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'ic_content',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'ic_url',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'time_stamp',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'os_type',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'imsi',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'register_ip',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'invite_code',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'point',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['pword'])) {
        $this->pword = $vals['pword'];
      }
      if (isset($vals['device_id'])) {
        $this->device_id = $vals['device_id'];
      }
      if (isset($vals['from_app'])) {
        $this->from_app = $vals['from_app'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['ulevel'])) {
        $this->ulevel = $vals['ulevel'];
      }
      if (isset($vals['total_score'])) {
        $this->total_score = $vals['total_score'];
      }
      if (isset($vals['ctime'])) {
        $this->ctime = $vals['ctime'];
      }
      if (isset($vals['caution'])) {
        $this->caution = $vals['caution'];
      }
      if (isset($vals['today_score'])) {
        $this->today_score = $vals['today_score'];
      }
      if (isset($vals['ic'])) {
        $this->ic = $vals['ic'];
      }
      if (isset($vals['ic_content'])) {
        $this->ic_content = $vals['ic_content'];
      }
      if (isset($vals['ic_url'])) {
        $this->ic_url = $vals['ic_url'];
      }
      if (isset($vals['time_stamp'])) {
        $this->time_stamp = $vals['time_stamp'];
      }
      if (isset($vals['os_type'])) {
        $this->os_type = $vals['os_type'];
      }
      if (isset($vals['imsi'])) {
        $this->imsi = $vals['imsi'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['register_ip'])) {
        $this->register_ip = $vals['register_ip'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['invite_code'])) {
        $this->invite_code = $vals['invite_code'];
      }
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
    }
  }

  public function getName() {
    return 'UserInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->from_app);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ulevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ctime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->caution);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->today_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ic_content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ic_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time_stamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->os_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imsi);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->register_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->invite_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserInfo');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::I64, 2);
      $xfer += $output->writeI64($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pword !== null) {
      $xfer += $output->writeFieldBegin('pword', TType::STRING, 3);
      $xfer += $output->writeString($this->pword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_id !== null) {
      $xfer += $output->writeFieldBegin('device_id', TType::STRING, 4);
      $xfer += $output->writeString($this->device_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_app !== null) {
      $xfer += $output->writeFieldBegin('from_app', TType::I32, 5);
      $xfer += $output->writeI32($this->from_app);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::STRING, 6);
      $xfer += $output->writeString($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ulevel !== null) {
      $xfer += $output->writeFieldBegin('ulevel', TType::I16, 7);
      $xfer += $output->writeI16($this->ulevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_score !== null) {
      $xfer += $output->writeFieldBegin('total_score', TType::I32, 8);
      $xfer += $output->writeI32($this->total_score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ctime !== null) {
      $xfer += $output->writeFieldBegin('ctime', TType::STRING, 9);
      $xfer += $output->writeString($this->ctime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->caution !== null) {
      $xfer += $output->writeFieldBegin('caution', TType::I16, 10);
      $xfer += $output->writeI16($this->caution);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->today_score !== null) {
      $xfer += $output->writeFieldBegin('today_score', TType::I32, 11);
      $xfer += $output->writeI32($this->today_score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ic !== null) {
      $xfer += $output->writeFieldBegin('ic', TType::I32, 12);
      $xfer += $output->writeI32($this->ic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ic_content !== null) {
      $xfer += $output->writeFieldBegin('ic_content', TType::STRING, 13);
      $xfer += $output->writeString($this->ic_content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ic_url !== null) {
      $xfer += $output->writeFieldBegin('ic_url', TType::STRING, 14);
      $xfer += $output->writeString($this->ic_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time_stamp !== null) {
      $xfer += $output->writeFieldBegin('time_stamp', TType::I32, 15);
      $xfer += $output->writeI32($this->time_stamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_type !== null) {
      $xfer += $output->writeFieldBegin('os_type', TType::STRING, 16);
      $xfer += $output->writeString($this->os_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imsi !== null) {
      $xfer += $output->writeFieldBegin('imsi', TType::STRING, 17);
      $xfer += $output->writeString($this->imsi);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 18);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->register_ip !== null) {
      $xfer += $output->writeFieldBegin('register_ip', TType::STRING, 19);
      $xfer += $output->writeString($this->register_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 20);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invite_code !== null) {
      $xfer += $output->writeFieldBegin('invite_code', TType::I32, 21);
      $xfer += $output->writeI32($this->invite_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::I32, 22);
      $xfer += $output->writeI32($this->point);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
